//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }
   
   
   String procName = null;
   
   int argCount = 0;
   
   
   String Labelrt = null;
 
 
   
   public String getLabel(String mName, String lbl ) {
	   
	   HashMap<String,String>L = Analysis.LABEL.get(mName);
	   
	   if(L.containsKey(lbl)) {
	   String str = L.get(lbl);
		   return str;
	   }
	   
	   return lbl ;
   }
   
   
   
   public String getReg(String mName,String temp ) {
		
		HashMap<String,String>regMap = Analysis.Reg.get(mName);
		
		String r = regMap.get(temp);
		
		int ind = temp.indexOf(" ");
		int val = Integer.parseInt( temp.substring(ind+1));
		
		Graph gh = GJVoidDepthFirst.CFG.get(mName);
		
		if(val< gh.argCount) {
			return ( "s"+ String.valueOf(val) );
		}
		
		if(r!=null)
			return r;
		else return null;
		
	
	}
   
   
   public int getSpill(String mName,String temp ) {
	   
	   HashMap<String,Integer>spill = Analysis.SPILL.get(mName);
		
		if ( spill.containsKey(temp) ) {
			return spill.get(temp);
		}
		else {
			return -1;
		}
		
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      this.procName = "main";
      Graph gh = GJVoidDepthFirst.CFG.get(procName);
      
      System.out.println( "MAIN "+"[" +gh.argCount+ "]"+" ["+ gh.stackCount +"]"+" ["+ gh.maxArg +"]" );
      n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);
      System.out.println(" END");
      
      HashMap<String,Integer>Spill = Analysis.SPILL.get(procName);
      if(Spill.isEmpty()) {
    	  System.out.println("// NOTSPILLED");
      }
      else {
    	  System.out.println("// SPILLED");
      }
      
      this.procName = null;
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   
   public boolean frmStmt = false;
   
   public R visit(StmtList n, A argu) {
      R _ret=null;
      this.frmStmt = true;
      n.f0.accept(this, argu);
      this.frmStmt = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      this.procName = n.f0.f0.tokenImage;
      Graph gh = GJVoidDepthFirst.CFG.get(procName);
      
      System.out.println(this.procName + " "+"[" +gh.argCount+ "]"+" ["+ gh.stackCount +"]"+" ["+ gh.maxArg +"]" );
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      n.f4.accept(this, argu);
      
      this.procName =null;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      
      if(this.Labelrt!=null) {
    	  System.out.println(this.getLabel(procName, Labelrt));
      }
      
      n.f0.accept(this, argu);
      
      this.Labelrt =null;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" ERROR ");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      String r = "TEMP "+ n.f1.f1.f0.tokenImage;
      String l = this.getLabel(procName,n.f2.f0.tokenImage);
      
      String rg = this.getReg(procName, r);
      if(rg==null) {
    	  int k = this.getSpill(procName, r);
    	  if( k!= -1 ) {
    		  System.out.println("ALOAD v1 SPILLEDARG "+k);
    		  rg = "v1";
    	  }
      }
      
      System.out.println(" CJUMP "+rg+" "+l);
      
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      String l = this.getLabel(procName,n.f1.f0.tokenImage);
      
      System.out.println(" JUMP "+l);
      
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      String t1 = "TEMP "+n.f1.f1.f0.tokenImage;
      String t2 = "TEMP "+n.f3.f1.f0.tokenImage;
      
      String r1 = this.getReg(procName, t1);
      if(r1==null) {
    	  int k = this.getSpill(procName, t1);
    	  if( k!= -1 ) {
    		  System.out.println("ALOAD v0 SPILLEDARG "+k);
    		  r1 = "v0";
    	  }
      }
      
      String r2 = this.getReg(procName, t2);
      if(r2==null) {
    	  int k = this.getSpill(procName, t2);
    	  if( k!= -1 ) {
    		  System.out.println("ALOAD v1 SPILLEDARG "+k);
    		  r2 = "v1";
    	  }
      }
      
     System.out.println( " HSTORE "+r1+" "+n.f2.f0.tokenImage+" "+r2); 
     
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      String t1 = "TEMP "+n.f1.f1.f0.tokenImage;
      String t2 = "TEMP "+n.f2.f1.f0.tokenImage;
      
      String r1 = this.getReg(procName, t1);
      int k1 = 0;
      if(r1==null) {
    	   k1 = this.getSpill(procName, t1);
    	  if( k1!= -1 ) {
    		  r1 = "v0";
    	  }
      }
      
      String r2 = this.getReg(procName, t2);
      if(r2==null) {
    	  int k2 = this.getSpill(procName, t2);
    	  if( k2!= -1 ) {
    		  System.out.println("ALOAD v1 SPILLEDARG "+k2);
    		  r2 = "v1";
    	  }
      }
      
      System.out.println(" HLOAD "+r1+" "+r2+" "+n.f3.f0.tokenImage);
      
      if(r1.compareTo("v0")==0) { System.out.println("ASTORE SPILLEDARG "+k1+" v0");}
     
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp =(String) n.f2.accept(this, argu);
      
      String t1 = "TEMP "+n.f1.f1.f0.tokenImage;
      
      String r1 = this.getReg(procName, t1);
      int k1 = 0;
      if(r1==null) {
    	   k1 = this.getSpill(procName, t1);
    	  if( k1!= -1 ) {
    		  r1 = "v1";
    	  }
      }
      
      System.out.println(" MOVE "+r1+" "+exp);
      
      if(r1.compareTo("v1")==0) { System.out.println("ASTORE SPILLEDARG "+k1+" v1");}
      
      
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String sp = (String)n.f1.accept(this, argu);
      
      System.out.println(" PRINT "+sp);
      
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String str = (String)n.f0.accept(this, argu);
      return (R)str;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Graph gh =  GJVoidDepthFirst.CFG.get(procName);
      
      int sp = gh.argCount-4;
      
      if(sp<0)sp=0;
      
      int i =0 ;
      
      String loadback = "";
      
      HashMap<String,Integer>Spill = Analysis.SPILL.get(procName);
      
      if(Spill.isEmpty()) {
	      for(i=0;i<gh.argCount;i++) {
	    	  System.out.println("ASTORE SPILLEDARG "+sp+" s"+i);
	    	  loadback+= " ALOAD s"+String.valueOf(i)+" SPILLEDARG "+String.valueOf(sp)+"\n";
	    	  sp++;
	      }
	      
	      for(int j=0;j<gh.usedScount;j++) {
	    	  System.out.println("ASTORE SPILLEDARG "+sp+" s"+i);
	    	  loadback+= " ALOAD s"+String.valueOf(i)+" SPILLEDARG "+String.valueOf(sp)+"\n";
	    	  i++;
	    	  sp++;
	    	  
	      }
      }
      else {
    	  
    	  for(i=0;i<8;i++) {
	    	  System.out.println("ASTORE SPILLEDARG "+sp+" s"+i);
	    	  loadback+= " ALOAD s"+String.valueOf(i)+" SPILLEDARG "+String.valueOf(sp)+"\n";
	    	  sp++;
	      }
    	  
      }
      
      
      if(gh.argCount > 4) {
	      for(int j=0;j<4;j++) {
	    	  System.out.println("MOVE s"+j+" a"+j);
	      }
	      
	      for(int j=4;j<gh.argCount;j++) {
	    	  System.out.println("ALOAD v1 SPILLEDARG "+String.valueOf(j-4));
	    	  System.out.println("MOVE s"+j+" v1");
	      }
      }
      else {
    	  
    	  for(int j=0;j<gh.argCount;j++) {
	    	  System.out.println("MOVE s"+j+" a"+j);
	      }
	      
      }
      
      n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);
      
      String spexp = (String) n.f3.accept(this, argu);
      
      System.out.println(" MOVE v0 "+spexp);
      
      n.f4.accept(this, argu);
      
      
      System.out.print(" "+loadback);
      System.out.println("END");
      
      //spilled or not
      
      
      
      if(Spill.isEmpty()) {
    	  System.out.println("// NOTSPILLED");
      }
      else {
    	  System.out.println("// SPILLED");
      }
     
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   
   public boolean fromCall = false;
   
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String sp = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      this.fromCall = true;
      n.f3.accept(this, argu);
      this.fromCall = false;
      n.f4.accept(this, argu);
      
      System.out.println(" CALL "+sp);
      
      this.argCount = 0;
      return (R)" v0 ";
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
     
      n.f0.accept(this, argu);
      String sp = (String)n.f1.accept(this, argu);
      
      
      return (R)( " HALLOCATE "+sp);
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String)n.f0.accept(this, argu);
      String t = (String)n.f1.accept(this, argu);
      String sp = (String)n.f2.accept(this, argu);
      
      String r = this.getReg(procName, t);
      
      if(r==null) {
		  int k = this.getSpill(procName, t);
		  if(k!=-1) {
			  System.out.println("ALOAD v1 SPILLEDARG "+k);
			  r = "v1";
		  }
	  }
      
      return (R)( op+" "+r+" "+sp+" ");
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      switch(n.f0.which) {
      case 0: return (R)"LE";
      case 1: return (R)"NE";
      case 2: return (R)"PLUS";
      case 3 : return (R)"MINUS";
      case 4 : return (R)"TIMES";
      case 5 : return (R)"DIV";
      }
      
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {

      
      String str = (String)n.f0.accept(this, argu);
      
      if(n.f0.which == 0) {
    	  String r = this.getReg(this.procName,str);
    	  if(r==null) {
    		  int k = this.getSpill(procName, str);
    		  if(k!=-1) {
    			  System.out.println("ALOAD v0 SPILLEDARG "+k);
    			  r = "v0";
    		  }
    	  }
    	  
    	  return (R)r;
      }
      else if(n.f0.which==1) {
    	return (R)(this.getLabel(procName, str));  
      }
      else {
    	  return (R)str;
      }
      
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
	   
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      if( this.fromCall) {
    	  
    	  String t = "TEMP "+n.f1.f0.tokenImage;
    	  String r = this.getReg(procName, t);
    	  if(r==null) {
    		  int k = this.getSpill(procName, t);
    		  if(k!=-1) {
    			  System.out.println("ALOAD v0 SPILLEDARG "+k);
    			  r = "v0";
    		  }
    	  }
    	  
    	  if(this.argCount < 4) {
    		  System.out.println("MOVE "+"a"+this.argCount+" "+r);
    	  }
    	  else {
    		  System.out.println("PASSARG "+String.valueOf( (this.argCount-4) + 1)+ " "+r );
    	  }
    	  
    	  this.argCount++;
      }
      
      
      return (R)("TEMP "+n.f1.f0.tokenImage);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
     
      n.f0.accept(this, argu);
      return (R)(n.f0.tokenImage);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
     
      n.f0.accept(this, argu);
      
      if(this.frmStmt)
    	  this.Labelrt = n.f0.tokenImage;
      else
    	  this.Labelrt = null;
      
      
      return (R)(n.f0.tokenImage);
   }

}
