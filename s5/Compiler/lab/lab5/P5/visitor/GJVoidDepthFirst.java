//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	int stmtNo = 0;
	
	public static HashMap<String,Graph>CFG = new HashMap<>();
	
	String procName = null;
	
	String Lblrt = null;
	
	int argNum = 0;
	
	int pArg = 0;
	
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public void visit(Goal n, A argu) {
      n.f0.accept(this, argu);
      stmtNo = 0;
      procName = "main";
      this.argNum = 0;
      Graph gh = new Graph(procName,0);
      CFG.put(procName, gh);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public void visit(StmtList n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public void visit(Procedure n, A argu) {
      n.f0.accept(this, argu);
      
      procName = n.f0.f0.tokenImage;
      stmtNo = 0;
     
      
      n.f1.accept(this, argu);
      
      
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      this.argNum = Integer.parseInt(n.f2.f0.tokenImage);
      Graph gh = new Graph(procName,this.argNum);
      CFG.put(procName, gh);
      n.f4.accept(this, argu);
      
      this.argNum = 0;
      
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public void visit(Stmt n, A argu) {
	  
	  GNode gn = new GNode(this.stmtNo++);
	 
	  if(Lblrt != null ) gn.label = Lblrt;
	  
      n.f0.accept(this, (A)gn);
      
      (CFG.get(procName)).add(gn); 
      Lblrt = null;
   }

   /**
    * f0 -> "NOOP"
    */
   public void visit(NoOpStmt n, A argu) {
	  //Do nothing 
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "ERROR"
    */
   public void visit(ErrorStmt n, A argu) {
	   // do nothing
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public void visit(CJumpStmt n, A argu) {
	  
	  GNode gn = (GNode)argu; 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t = "TEMP "+n.f1.f1.f0.tokenImage;
      gn.addUse(t,argNum);
      n.f2.accept(this, argu);

   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public void visit(JumpStmt n, A argu) {
	   //do nothing
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public void visit(HStoreStmt n, A argu) {
	  GNode gn = (GNode)argu; 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t1 = "TEMP "+n.f1.f1.f0.tokenImage;
      gn.addUse(t1,argNum);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String t2 = "TEMP "+n.f3.f1.f0.tokenImage;
      gn.addUse(t2,argNum);
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public void visit(HLoadStmt n, A argu) {
	  GNode gn = (GNode)argu; 
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t1 = "TEMP "+n.f1.f1.f0.tokenImage;
      gn.addDef(t1,argNum);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String t2 = "TEMP "+n.f2.f1.f0.tokenImage;
      gn.addUse(t2,argNum);
      
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public void visit(MoveStmt n, A argu) {
	   GNode gn = (GNode)argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t1 = "TEMP "+n.f1.f1.f0.tokenImage;
      gn.addDef(t1,argNum);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public void visit(PrintStmt n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public void visit(Exp n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public void visit(StmtExp n, A argu) {
      n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
     
      n.f2.accept(this, argu);
      
      GNode gn = new GNode(this.stmtNo++);
      n.f3.accept(this,(A)gn);
      (CFG.get(procName)).add(gn);
      n.f4.accept(this, argu);
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   boolean fromCall = false;
   public void visit(Call n, A argu) {
      n.f0.accept(this, argu);
      //simplexp take care
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      fromCall = true;
      n.f3.accept(this, argu);
      fromCall = false;
      
      Graph gh = CFG.get(procName);
      gh.addParg(pArg);
      
      n.f4.accept(this, argu);
      
      this.pArg = 0;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public void visit(HAllocate n, A argu) {
      n.f0.accept(this, argu);
      //simple exp take care
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public void visit(BinOp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      GNode gn = (GNode)argu;
      String t = "TEMP "+n.f1.f1.f0.tokenImage;
      gn.addUse(t,argNum);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public void visit(Operator n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   
   String TTEMP = null;
   public void visit(SimpleExp n, A argu) {
      n.f0.accept(this, argu);
      
      if(n.f0.which==0) {
    	GNode gn = (GNode)argu;
    	//TODO remove
    	if(TTEMP==null) {System.out.println("error in simplexp temp");}

    	gn.addUse(TTEMP,argNum);
    	TTEMP = null;
      }
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public void visit(Temp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      TTEMP = "TEMP "+n.f1.f0.tokenImage;
      
      if(fromCall) {
    	  GNode gn = (GNode)argu;
    	  gn.addUse(TTEMP,argNum);
    	  this.pArg+=1;
      }
      
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Label n, A argu) {
      n.f0.accept(this, argu);
      Lblrt = n.f0.tokenImage;
   }

}
